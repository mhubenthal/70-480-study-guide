"{"results":[{"sectionTitle":"Implement and manipulate document structures and objects","sectionPercent":"24","topics":[{"topicTitle":"Create the document structure","topicContent":"Structure the UI by using semantic markup, including for search engines and screen readers (Section, Article, Nav, Header, Footer, and Aside); create a layout container in HTML","userContent":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\"/>\n    <title>HTML5</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/style.css\"/>\n    <script type=\"text/javascript\" src=\"js/somefile.js\"></script>\n  </head>\n  <body>\n    <header>\n      <nav></nav>\n    </header>\n    <main>\n      <section></section>\n      <section></section>\n    </main>\n    <aside></aside>\n    <footer></footer>\n    <script></script>\n  </body>\n</html>","isFinished":true},{"topicTitle":"Write code that interacts with UI controls","topicContent":"Programmatically add and modify HTML elements; implement media controls; implement HTML5 canvas and SVG graphics","userContent":"// Add, modify HTML elements with js\nvar item = document.querySelector(\"#some-id\"); \n// or \".class\" or \"tagname\"\n// or .getElementById or .getElementsByClassName etc.\nitem.replaceChild(newChild, item.childNodes[0]);\n// or .appendChild or .insertBefore\n\n\n// Change style with js\nvar item = document.getElementById(\"some-id\");\nitem.style.color = \"red\";\n\n// Sample <audio>, <video> markup\n<audio controls ETC><source src=\"some/dir\" type=\"FORMAT\"></audio>\n<video><source src=\"some/dir\" type=\"FORMAT\"></video>\n\n// Sample <canvas> markup\n<canvas id=\"my-canvas\"></canvas>\nvar myCanvas = document.getElementById(\"my-canvas\");\nvar ctx = myCanvas.getContext(\"2d\");\nctx.fillStyle = \"#FFFFFF\";  \nctx.fillRect(0,0,100,100);\nctx.beginPath();\nctx.moveTo(0,0);\nctx.lineTo(10,10);\nctx.fillStyle = \"#000000\";\nctx.stroke();\nctx.save(); // Pushes onto a stack of saved canvas objects\nctx.restore(); // Pops objects off of stack\n\n// Sample <svg> markup\n<svg id=\"my-svg\" height=\"100\" width=\"100\">\n  <circle cx=\"51\" cy=\"75\" r=\"30\" fill=\"red\" stroke=\"yellow\"/>\n</svg>","isFinished":true},{"topicTitle":"Apply styling to HTML elements programmatically","topicContent":"Change the location of an element; apply a transform; show and hide elements","userContent":"// Use CSS to position elements\ndisplay: inline, inline-block, block, none;\nposition: static, relative, absolute, fixed;\nfloat: left, right;\nclear: left, right, none, both;\n\n// Code a transform\ntransform: skew(x,y), rotate(x,y,z), translate(x,y,z), scale(x,y), perspective;\n\n// Hide and show elements\ndisplay: none;\nvisibility: hidden, visible;","isFinished":true},{"topicTitle":"Implement HTML5 APIs","topicContent":"Implement storage APIs, AppCache API, and Geolocation API","userContent":"// Session and local work the same\n// Save data\nvar jsonData = {value1: \"string\",value2: 3};\nvar formatData = JSON.stringify(jsonData);\nwindow.localStorage.setItem('formatData',formatData);\n// Get data\nvar getData = window.localStorage.getItem('formatData');\nvar parsedData = JSON.parse(getData);\nconsole.log(parsedData);\n\n// AppCache API\n// Include manifest file\n// Attribute on html tag\n<html manifest=\"mymf.manifest\">\n// Serve manifest file with MIME type of \"text/cache-manifest\"\n//.manifest file\nCACHE MANIFEST // always first line\nCACHE:\n#urls of files to cache\nFALLBACK:\n#substitute files to use\nNETWORK:\n#list of items NOT to cache\n\n// Geolocation\nnavigator.geolocation.getCurrentPosition(function(position){\n  console.log(position.coords.longitude);\n});\n// Also watchPosition(), returns an ID\n\n\n","isFinished":true},{"topicTitle":"Establish the scope of objects and variables","topicContent":"Define the lifetime of variables; keep objects out of the global namespace; use the “this” keyword to reference an object that fired an event; scope variables locally and globally","userContent":"// Example of function and var scope\n- Variables created with var keyword within a function are local to that scope, all else are global. All vars are hoisted to the top of their scope as undefined. They are destroyed when function call ends. \n- Functions are hoisted to the top of their scope completely defined.\n- Namespace with properties on an object, IIFE module pattern\n\n// Example of closure\nfunction a(){\n  var outer = 1;\n  function b(){\n    var inner = 2;\n    outer = 3;\n  }\n}\n- Closures 'remember' the environment they were created in.\n\n// Example of meanings of 'this'\n1. Function invoked with 'new' keyword, 'this' refers to object created.\n2. Function w/out 'new' keyword --> global scope.\n3. Calling an object's method, 'this' refers to the object.\n4. Inline event handler 'this' --> global object.\n5. Event handler added with js 'this' --> object that fired the event.\n6. call() and apply() can change the scope of a function. call() takes 'this' context plus list of parameters, apply() takes 'this' context plus array of parameters.\n","isFinished":true},{"topicTitle":"Create and implement objects and methods","topicContent":"Implement native objects; create custom objects and custom properties for native objects using prototypes and functions; inherit from an object; implement native methods and create custom methods","userContent":"// Objects/methods general\n- native --> browser implementation of ES\n- host --> browser DOM and associated js methods\n\n// OOP principles --> encapsulation, inheritance, polymorphism\n- Only expose object members for public use, public/private methods\n- Objects can inherit through the prototype chain\n- polymorphism --> override inherited methods\n\n// Native objects\n- global, Object, Function, Array, String, Boolean, Number. Math. Date. RegExp, Error, JSON\n\n// Inheritance\nvar myObj = (function(){\n  function myObj(){\n    var t = 5;\n    this.getT = function(){ return t;};\n  }\n  myObj.prototype.myMethod = function(){console.log('inheritable')};\n  return myObj;\n}())\nvar child = (function(){\n  function child(){\n    var x = 6;\n    this.getX = function(){ return x };\n  }\n  child.prototype = new myObj();\n  child.prototype.constructor = myObj;\n  return child;\n}())\n\n// Add to native\nArray.prototype.newMethod = function(){do something;};\n","isFinished":true}]},{"sectionTitle":"Implement program flow","sectionPercent":"25","topics":[{"topicTitle":"Implement program flow","topicContent":"Iterate across collections and array items; manage program decisions by using switch statements, if/then, and operators; evaluate expressions","userContent":"// Collections and arrays\nvar arr = [1,2,3,4];\nfor(var n in arr){\n  console.log(arr[n]);\n}\nfor(var i=0;i<arr.length;i+=1){\n  console.log(arr[i]);\n}\n\n// Switch statement\nfunction whatSay(animal){\n  switch(animal){\n    case \"puppy\":\n    case \"dog\":\n       says = \"woof\";\n    break;\n    case \"kitty\":\n    case \"cat\":\n       says = \"meow\";\n    break;\n    case \"cow\":\n       says = \"moo\";\n    break;\n    case \"fox\":\n       says = \"Gering-ding-ding-ding-dingeringeding\";\n    break;\n    default:\n       says = \"uhhh....\";\n    break;\n  }\n  return says;\n}\n\n","isFinished":true},{"topicTitle":"Raise and handle an event","topicContent":"Handle common events exposed by DOM (OnBlur, OnFocus, OnClick); declare and handle bubbled events; handle an event by using an anonymous function","userContent":"// Add listeners\n<button id=\"myButton\" onclick=\"someFunc()\">Click me!</button>\n\nvar el = document.getElementById('some-id');\nel.addEventListener('click', function(){\n  alert('clicked');\n});\n\nel.onClick = function(){\n  alert('clicked');\n};\n\n// Common events\n- onmousedown, onmouseup, onclick, ondblclick, onmouseover, onmouseout, onmousemove, onkeydown, onkeyup, onkeypress, onfocus, onblur, onselectstart, onselect, ondragstart, onreadystatechange (XHR object), onload, onunload, onchange, ETC...\n\n// Event lifecycle\n- When event is triggered, it begins at the root element (<html>) and works its way down the DOM tree to the element that fired it (event capture)\n- Then it moves back up the DOM tree (event bubbling). It can be caught/handled by an event handler at this point. An event handler can call stopPropogation() to stop the process.","isFinished":true},{"topicTitle":"Implement exception handling","topicContent":"Set and respond to error codes; throw an exception; request for null checks; implement try-catch-finally blocks","userContent":"// Native Error object\n- Has a message and name property\n- Some types: SyntaxError, ReferenceErrror, TypeError, URIError, RangeError, ETC...\n\n// Try, catch, throw\ntry {\n  try {\n    throw new Error(\"oops\");\n  }\n  catch (ex) {\n    console.error(\"inner\", ex.message);\n    throw ex;\n  }\n  finally {\n    console.log(\"finally\");\n  }\n}\ncatch (ex) {\n  console.error(\"outer\", ex.message);\n}\n// Output:\n// \"inner\" \"oops\"\n// \"finally\"\n// \"outer\" \"oops\"\n\n// Null checks\nif(obj.someProperty){\n  // Do something\n}\nelse{\n  // Do something else\n}","isFinished":true},{"topicTitle":"Implement a callback","topicContent":"Receive messages from the HTML5 WebSocket API; use jQuery to make an AJAX call; wire up an event; implement a callback by using anonymous functions; handle the “this” pointer","userContent":"// WebSockets\nvar newWS = new WebSocket('ws://echo.websocket.org/');\nnewWS.onopen = function (e) {onOpen(e)};\nnewWS.onclose = function (e) {onClose(e)};\nnewWS.onmessage = function (e) {onMessage(e)};\nnewWS.onerror = function (e) {onError(e)};\n// CONNECTING --> value = 0\n// OPEN --> value = 1\n// CLOSING --> value = 2\n// CLOSED --> value = 3\nnewWS.send(\"Hello World from WebSockets!\");\n// Message can be UTF-8, binary blob or arrayBuffer\nnewWS.close( 1000, \"Closed by user.\");  \n// Integer === 1000 or in range 3000 - 4999\n\n// 'Raw' AJAX\nxmlhttp=new XMLHttpRequest();\nxmlhttp.onreadystatechange=function()\n  {\n  if (xmlhttp.readyState==4 && xmlhttp.status==200)\n    {\n    // Do something with xmlhttp.responseText\n    }\n  }\nxmlhttp.open(\"GET\",\"ajax_info.txt\",true);\nxmlhttp.send();\n\n// AJAX w/jQuery\n$.ajax({\n   type: \"POST\",\n   url: url,\n   data: data,\n   success: success,\n   dataType: dataType\n});\n","isFinished":true},{"topicTitle":"Create a web worker process","topicContent":"Start and stop a web worker; pass data to a web worker; configure timeouts and intervals on the web worker; register an event listener for the web worker; limitations of a web worker","userContent":"// Web workers --> way around single-threaded browser environment\n// Limitations: cannot access DOM, limited window access (only a few methods), no localStorage, can import scripts and use navigator object\nvar worker = new Worker('myWorker.js');\n// code in myWorker.js will run until...\nworker.terminate() or self.close()\n// Messages are passed between main process thread and worker with...\nworker.postMessage(\"Some message\");\n// Inside of worker code:\nvar rcvdMessage = new String();\nself.onmessage = function (e) { rcvdMessage = e.data; };\n// Worker can send message\nself.postMessage(\"You said: \" + rcvdMessage);\n// Main thread can listen...\nworker.onmessage = function (e) {alert(e.data)};\n// Workers can set timers\nself.setInterval(function () {}, interval);\nself.setTimeout(function () {}, timeout);","isFinished":true}]},{"sectionTitle":"Access and secure data","sectionPercent":"26","topics":[{"topicTitle":"Validate user input by using HTML5 elements","topicContent":"Choose the appropriate controls based on requirements; implement HTML input types and content attributes (for example, required) to collect user input","userContent":"// Input controls are determined by the 'type' attribute\n// 'fieldset' and 'legend' are for grouping form controls\n// 'pattern' attribute --> match against regex for validation\n// 'required' attribute --> form cannot be submitted without this field satisfied","isFinished":true},{"topicTitle":"Validate user input by using JavaScript","topicContent":"Evaluate a regular expression to validate the input format; validate that you are getting the right kind of data type by using built-in functions; prevent code injection","userContent":"// Regex\nvar regex = /abc/;\n// OR\nvar regex = new RegExp('abc');\n// Match zip code with or without 4 digit extension\nvar zipRegex = /\\b[0-9]{5}(-[0-9]{4})?\\b/;\nvar regex = /      /g;  <-- search for all matches, global\n\n// typeof function may be helpful, but not with most inputs (as they are of type string)\n\n// XSS\n// Better to use an external library\n// possible to save text to a temp element and get the .innerHTML\nfunction escape(el){\n  temp = document.createElement('textarea');\n  temp.textContent = el.value;\n  document.getElementById(\"target\").value = temp.innerHTML;\n}\n","isFinished":true},{"topicTitle":"Consume data","topicContent":"Consume JSON and XML data; retrieve data by using web services; load data or get data from other sources by using XMLHTTPRequest","userContent":"//JSON\nxmlhttp=new XMLHttpRequest();\nxmlhttp.onreadystatechange=function(){\n  if (xmlhttp.readyState==4 && xmlhttp.status==200){\n    // Do something with xmlhttp.responseText\n    }\n  }\nxmlhttp.open(\"GET\",\"ajax_info.txt\",true);\nxmlhttp.send();\n\nJSON.parse(someJSON);  // To get JSON object\nJSON.stringify(someJSON);  // To prepare JSON to be sent out\n\n\n// XML\n\n// on response object, use 'responseXML' property\n// then the data can be parsed the same as the DOM (same methods)\n// if response is a string of XML data, the DOMParser object will parse into a DOM tree","isFinished":true},{"topicTitle":"Serialize, deserialize, and transmit data","topicContent":"Binary data; text data (JSON, XML); implement the jQuery serialize method; Form.Submit; parse data; send data by using XMLHTTPRequest; sanitize input by using URI/form encoding","userContent":"// ArrayBuffer --> represents binary data\n// Not possible to write to ArrayBuffer directly, this must be done with ArrayBufferView, an\n// abstract interface that holds information among the various typed array views.\n// Typed arrays can be signed/unsigned Int8, Int16, Int32, Float32, Float64, 'clamped' unsigned Int8.\n// Typed arrays can be constructed directly (which creates a new associated ArrayBuffer).\n// OR they can be created as views to an existing ArrayBuffer.\n\n// DataView interface object provides low-level access to ArrayBuffer data\n\n// Blob object is created by combining ArrayBuffers, typed Arrays, Strings, other Blobs\n// The only way to read directly from a Blob is with a FileReader object\n\nfunction setBlob () {\n    var val = document.getElementById('val').value;\n    blob = new Blob([val], {type : 'text/html'});\n}\n\nfunction getBlob() {\n    var reader = new FileReader();\n    reader.addEventListener(\"loadend\", function() {\n        write(reader.result);\n    });\n    reader.readAsText(blob);\n}\n\n// Binary data with XMLHTTPRequest object\n// set responseType to 'arraybuffer' or 'blob'\n\n// jQuery serialize method\n$(\"form\").serialize(); \n// serializes form data into a URL string likeL name1=val1&name2=val2&...\n\n\n// XMLSerializer object// creates new serializer object\nx = new XMLSerializer \n\n// creates new parser object  \ndp = new DOMParser      \n\n// serializes the current page into a \n// string and assigns it to dtext\ndtext = x.serializeToString(document) \n\n// converts string back into HTML DOM tree\ndp.parseFromString(dtext, \"text/html\")\n\n// Encoding and decoding URIs\n// for a valid URL use encodeURI() NOT encodeURIComponents()\n\n// Three possible encoding types for form data:\n// 1. application/x-www-form-urlencoded\n// 2. multipart/form-data\n// 3. text/plain\n","isFinished":true}]},{"sectionTitle":"Use CSS3 in applications","sectionPercent":"25","topics":[{"topicTitle":"Style HTML text properties","topicContent":"Apply styles to text appearance (color, bold, italics); apply styles to text font (WOFF and @font-face, size); apply styles to text alignment, spacing, and indentation; apply styles to text hyphenation; apply styles for a text drop shadow","userContent":"// Using @font-face\n// src points to: ttf (TrueType Font), woff (Web Open Font Format), eot (Embedded OpenType --> IE only) or otf (OpenType Font)\n\n@font-face: {\n  font-family: sansation;\n  src: url(http://www.w3schools.com/cssref/sansation_light.woff);\n}\n\np {\n  font-family: sansation;\n}\n\n// Misc text styling properties\n- text-shadow --> x offset y offset blur color;\n- white-space\n  -normal: collapse whitespace, wrap text\n  - pre: preserve whitespace, do not wrap text\n  - nowrap: collapse whitespace, do not wrap\n  - pre-wrap: preserve whitespace, do not wrap\n  - pre-line: collapse spaces and tabs, preserve line feeds, do not wrap","isFinished":true},{"topicTitle":"Style HTML box properties","topicContent":"Apply styles to alter appearance attributes (size, border and rounding border corners, outline, padding, margin); apply styles to alter graphic effects (transparency, opacity, background image, gradients, shadow, clipping); apply styles to establish and change an element’s position (static, relative, absolute, fixed)","userContent":"- content-box model\n  - width/height define the 'content' area, other dimensions are applied on top\n- border-box model\n  - width/height define the 'content' area + padding + border, other dimensions are applied on top\n\n// Border styles\nsolid, dotted, dashed, double, groove, ridge, inset, outset\nborder: width style color;\nborder-radius: size;\n\n- position\n  - static: normal, top right bottom left z-index don't apply;\n  - relative: relative to where it would normally appear on the page, leaves gap where it would have been;\n  - absolute: relative to closest positioned ancestor or containing block, does not leave gap for the element;\n  - fixed: relative to the browser window, taken out of the flow of the page;","isFinished":true},{"topicTitle":"Create a flexible content layout","topicContent":"Implement a layout using a flexible box model; implement a layout using multi-column; implement a layout using position floating and exclusions; implement a layout using grid alignment; implement a layout using regions, grouping, and nesting","userContent":"// Flexbox\n.flextainer {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  align-items: center;\n  align-content: space-around;\n  justify-conent: space-around;\n}\n\n// Grid layout\n\n// Exclusions\n- Go with grid layout, define an area that other content should flow around\n\n// Multicolumn Layout\n- columns (shorthand)\n  - column-count: number;\n  - column-width: minimum column width;\n- column-gap: space between cols;\n\n// Regions\n- Content will 'flow' from one container to another.","isFinished":true},{"topicTitle":"Create an animated and adaptive UI","topicContent":"Animate objects by applying CSS transitions; apply 3-D and 2-D transformations; adjust UI based on media queries (device adaptations for output formats, displays, and representations); hide or disable controls","userContent":"// Transitions\n- transition-property: properties to be transitioned (all other changed properties not specified here will happen immediately)\n- transition-duration: ms;\n- transition-timing-function: ease, ease-in, ease-out, ease-in-out, linear, cubic-bezier(n1, n2, n3, n4)\n- transition-delay: ms;\n\n// Transforms\n- matrix, matrix3d\n- translateX/Y/Z\n- scaleX/Y/Z/3d\n- rotateX/Y/Z/3d\n- skewX/Y\n- perspective\n- transform-origin: centered by default;\n- transform-style: flat preserve-3d;\n\n// Animation with @keyframes\n@keyframes spin {\n  0%   {transform: rotate(0deg) }\n  50%  {transform: rotate(90deg) scale(2)}\n  100% {transform: rotate(180deg) }\n}\n\nTHEN...\n\n.spin{\n    z-index: 100;\n    animation: spin 3s infinite linear;\n    -webkit-animation: spin 3s infinite linear;\n}\n\n// Media queries\n@media (  ) and (  ) {\n\n}\n&& --> 'and'\n|| --> ','\n! --> 'not'\n\n- width, height, min-, max-, device-width, device-height, orientation, aspect-ratio, device-aspect-ratio, color, color-index, monochrome, resolution, scan, grid","isFinished":true},{"topicTitle":"Find elements by using CSS selectors and jQuery","topicContent":"Choose the correct selector to reference an element; define element, style, and attribute selectors; find elements by using pseudo-elements and pseudo-classes (for example, :before, :first-line, :first-letter, :target, :lang, :checked, :first-child)","userContent":"// CSS Selectors\n* --> universal (expensive way to apply style)\nelement { style } --> type selector\n.class { style } --> class selector\n#id { style } --> id selector\n*[a] - any element with attribute \"a\" \n*[a='b'] - any element with attribute \"a\" exactly equal to \"b\"\n*[a*='b'] - any element with attribute \"a\" containing the substring \"b\"\n*[a^='b'] - any element with attribute \"a\" beginning with \"b\"\n*[a$='b'] - any element with attribute \"a\" ending with \"b\"\n*[a~='b'] - any element with attribute \"a\" containing a whitespace seperated list, with a value equal to \"b\"\n*[a|='b'] - any element with attribute \"a\" containing a hyphen-seperated list beginning with \"b\"\n\n// For jQuery, merely insert selectors --> $(\"css-selector\")\n\n// CSS Combinators\nA B { style } --> descendent combinator\nA > B { style } --> child combinator ( all elements B that are direct children of A )\nA + B { style } --> adjacent sibling combinator (selects element B DIRECTLY adjacent to A )\nA ~ B { style } --> general sibling combinator ( selects element B that follows A where they share the same parent element)\n\n// UI State\n:hover, :active (primary mouse button is being held down), :link (unvisited links), :focus, :enabled (default input state), :disabled, :checked, :indeterminate (input neither checked/unchecked, likely set by JS), :default (applies to selection element with default=\"default\" attribute), :valid (applies when data in a control is valid), :invalid, :in-range, :out-of-range, :required (required=\"required\"), :optional (any form element that isn't required), :read-only (any non user-editable element), :read-write (user-editable elements)\n\n// Structural :pseudo-classes\n:root (document root), :nth-child() (element with a*n + (b-1) siblings before it), :nth-last-child() (same as previous except working from the last child backward), :nth-of-type() (same except only counts matching element types), :nth-last-of-type() (backward), :first-child (same as :nth-child(1)), :last-child (same as nth-last-child(1)), :first-of-type (same as :nth-of-type(1)), :last-of-type (same as :nth-last-of-type(1)), :only-child (element is child of an element with no other children), :only-of-type (element is a child of an element with no other children of that type), :empty (element has no children)\n\n// ::pseudo-elements (elements not part of the DOM structure)\n::first-line, ::first-letter, ::after, ::before","isFinished":true},{"topicTitle":"Structure a CSS file by using CSS selectors","topicContent":"Reference elements correctly; implement inheritance; override inheritance by using !important; style an element based on pseudo-elements and pseudo-classes (for example, :before, :first-line, :first-letter, :target, :lang, :checked, :first-child)","userContent":"// Low to high precedence (by origin and importance)\n- user agent\n- user styling\n- author styling\n- author !important styling\n- user !important styling\n\n- Rules with same precedence level according to origin and importance are sorted based on specificity.\n\n// Specificity from high to low (0,0,0,0)\n- style=\"\" attribute on element in html\n- id selector\n- class, pseudo-class selectors\n- element types, pseudo-elements\n// Example: div.red[data-attr] --> (0,0,2,1)\n\n// Parent will win out\n#parent div {background-color: red}  - 0,1,0,1\n#child {background-color: blue} - 0,1,0,0\n\n0,1,0,0 > 0,0,100,0 (higher priority number ALWAYS wins)\n\n// Exactly equal specificity\n- If two rules have exactly the same specificity, they are applied in textual order, thus the last specified will be applied.\n\n// Inheritance\n- Not all CSS properties are inheritable, some are\n\n","isFinished":true}]}],"currentSection":0,"currentTopic":0,"numFinished":21}"